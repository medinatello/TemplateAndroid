CREATE TABLE IF NOT EXISTS User (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    createdAt INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS Person (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    birthDateMillis INTEGER NOT NULL,
    weightKg REAL NOT NULL,
    isLeftHanded INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS Element (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER
);

-- User queries
selectAll:
SELECT * FROM User;

selectById:
SELECT * FROM User WHERE id = ?;

selectByEmail:
SELECT * FROM User WHERE email = ?;

insertUser:
INSERT INTO User(name, email, createdAt) VALUES (?, ?, ?);

updateUser:
UPDATE User SET name = ?, email = ? WHERE id = ?;

deleteUser:
DELETE FROM User WHERE id = ?;

deleteAll:
DELETE FROM User;

-- Person queries
selectAllPersons:
SELECT * FROM Person ORDER BY lastName, firstName;

selectPersonById:
SELECT * FROM Person WHERE id = ?;

insertPerson:
INSERT INTO Person(firstName, lastName, birthDateMillis, weightKg, isLeftHanded) 
VALUES (?, ?, ?, ?, ?);

updatePerson:
UPDATE Person SET firstName = ?, lastName = ?, birthDateMillis = ?, weightKg = ?, isLeftHanded = ? 
WHERE id = ?;

deletePerson:
DELETE FROM Person WHERE id = ?;

lastInsertRowId:
SELECT last_insert_rowid();

-- Element queries
selectAllElements:
SELECT * FROM Element ORDER BY createdAt DESC;

selectElementById:
SELECT * FROM Element WHERE id = ?;

insertElement:
INSERT INTO Element(title, createdAt) VALUES (?, ?);

updateElement:
UPDATE Element SET title = ?, updatedAt = ? WHERE id = ?;

deleteElement:
DELETE FROM Element WHERE id = ?;

-- Cache table for HTTP responses
CREATE TABLE IF NOT EXISTS CacheEntry (
    key TEXT PRIMARY KEY,
    data TEXT NOT NULL,
    cachedAt INTEGER NOT NULL,
    expiresAt INTEGER NOT NULL
);

-- Cache queries
selectCacheByKey:
SELECT * FROM CacheEntry WHERE key = ? AND expiresAt > ?;

insertOrReplaceCacheEntry:
INSERT OR REPLACE INTO CacheEntry(key, data, cachedAt, expiresAt) VALUES (?, ?, ?, ?);

deleteExpiredCache:
DELETE FROM CacheEntry WHERE expiresAt <= ?;

deleteCacheByKey:
DELETE FROM CacheEntry WHERE key = ?;

clearAllCache:
DELETE FROM CacheEntry;